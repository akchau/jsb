"""
–ú–µ–Ω—é –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–∞–Ω—Ü–∏–∏.
"""
from telegram import InlineKeyboardButton, Update, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from src.bot import constants
from src.bot.bot_types import StationActions
from src.controller.controller_types import StationsDirection
from src.init_app import get_app_data


async def registered_stations(update: Update, _: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–∞–Ω—Ü–∏–∏.
    :param update:
    :param _:
    :return:
    """
    buttons = [
        [
            InlineKeyboardButton(text="–ò–∑ –ú–æ—Å–∫–≤—ã üè°üöÑüè¢", callback_data=f"{constants.REGISTERED_STATIONS_WITH_DIRECTION}/{StationsDirection.FROM_MOSCOW}"),
            InlineKeyboardButton(text="–í –ú–æ—Å–∫–≤—É üè¢üöÑüè°", callback_data=f"{constants.REGISTERED_STATIONS_WITH_DIRECTION}/{StationsDirection.TO_MOSCOW}"),
        ],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üî¥‚¨ÖÔ∏è", callback_data=str(constants.ADMIN))]
    ]
    keyboard = InlineKeyboardMarkup(buttons)
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(text="–ú–æ–∏ —Å—Ç–∞–Ω—Ü–∏–∏ üõ§", reply_markup=keyboard)
    return constants.REGISTERED_STATIONS


async def registered_stations_with_direction(update: Update, _: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞–Ω—Ü–∏–π –æ—Ç –ú–æ—Å–∫–≤—ã.
    :param update:
    :param _:
    :return:
    """
    query = update.callback_query
    data = query.data
    direction = data.split("/")[1]
    if len(data.split("/")) == 4:
        action = data.split("/")[2]
        code = data.split("/")[3]
        if action == StationActions.REGISTER:
            await get_app_data().controller.register_new_station(direction=direction, code=code)
        elif action == StationActions.MOVE:
            await get_app_data().controller.move_station(direction=direction, code=code)
        elif action == StationActions.DELETE:
            await get_app_data().controller.delete_station(direction=direction, code=code)
    stations = await get_app_data().controller.get_registered_stations(direction=direction)

    buttons = [
        *[[InlineKeyboardButton(station.title, callback_data=f"{constants.EDIT_STATION}/{direction}/{station.code}")]
          for station in stations],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è üõ§‚¨ÖÔ∏è", callback_data=str(constants.REGISTERED_STATIONS))],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üî¥‚¨ÖÔ∏è", callback_data=str(constants.ADMIN))]
    ]
    keyboard = InlineKeyboardMarkup(buttons)
    await update.callback_query.answer()

    if direction == StationsDirection.FROM_MOSCOW:
        text_direction = "–ò–∑ –ú–æ—Å–∫–≤—ã üè°üöÑüè¢"
    elif direction == StationsDirection.TO_MOSCOW:
        text_direction = "–í –ú–æ—Å–∫–≤—É üè¢üöÑüè°"

    await update.callback_query.edit_message_text(text=f"–°—Ç–∞–Ω—Ü–∏–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ {text_direction}", reply_markup=keyboard)

    return constants.REGISTERED_STATIONS_WITH_DIRECTION