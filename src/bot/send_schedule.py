"""
–ú–æ–¥—É–ª—å –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ Telegram.
"""
class DataConstructor:
    """
    –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.
    """

    def __init__(self, pagination):
        self.__pagination = pagination

    @staticmethod
    def _clean_fulling(value: str) -> str:
        """
        –ê–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏.
        :param value:
        :return:
        """
        if "–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω–∞—è" in value:
            return "üçÉ"
        else:
            return "‚ô®Ô∏è"

    @staticmethod
    def _clean_train_type(value: str) -> str:
        """
        –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–º–∞–π–ª–∏–∫–∞ –¥–ª—è —Ç–∏–ø–∞ –ø–æ–µ–∑–¥–∞.
        :param value: –°—Ç—Ä–æ–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–∏–ø–∞ –ø–æ–µ–∑–¥–∞.
        :return:
        """
        clean_value = value
        if value == "–°—Ç–∞–Ω–¥–∞—Ä—Ç –ø–ª—é—Å":
            clean_value = "üöà"
        elif value == "–ü—Ä–∏–≥–æ—Ä–æ–¥–Ω—ã–π –ø–æ–µ–∑–¥":
            clean_value = "üöÇ"
        elif value in ["—ç–∫—Å–ø—Ä–µ—Å—Å –†–≠–ö–°", "—Ñ–∏—Ä–º–µ–Ω–Ω—ã–π —ç–∫—Å–ø—Ä–µ—Å—Å (–±–∏–ª–µ—Ç—ã c —É–∫–∞–∑–∞–Ω–∏–µ–º –º–µ—Å—Ç)"]:
            clean_value = "üöù"
        return clean_value

    def _construct_string(self, data: dict):
        """
        –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å—Ç—Ä–æ–∫–∏.
        :param data:
        :return:
        """
        train_type = self._clean_train_type(data["train_type"])
        fulling = self._clean_fulling(data["name"])
        departure = data["departure"]
        arrival = data["arrival"]
        time = f"{departure}-{arrival}"
        duration = data["duration"]
        platform = data["departure_platform"]
        bold_flag = duration <= 20  # Simplified condition
        if bold_flag:
            schedule_message = f"\n\n<b>{train_type} {time} ({duration}–º–∏–Ω. {fulling}) ~{platform}–ø–ª.</b>\n"
        else:
            schedule_message = f"\n{train_type} {time} ({duration}–º–∏–Ω. {fulling}) ~{platform}–ø–ª."
        return schedule_message

    def constructor(self, data: dict) -> list:
        """
        –ö–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
        :param data:
        :return:
        """
        schedule_message = "–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n"
        counter = 0
        result_list = []
        for _, value in data.items():
            if counter < self.__pagination:
                counter += 1
                schedule_message += self._construct_string(value)
            else:
                result_list.append(schedule_message)
                schedule_message = self._construct_string(value)
                counter = 1
        result_list.append(schedule_message)
        return result_list


if __name__ == "__main__":
    constructor = DataConstructor(10)
