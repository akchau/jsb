"""
–¢–∏–ø—ã –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
"""
import datetime
from enum import Enum
from pydantic import BaseModel, validator


class StationsDirection(str, Enum):
    """
    –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–∞–Ω—Ü–∏–π.
    """
    TO_MOSCOW = "TO_MOSCOW"
    FROM_MOSCOW = "FROM_MOSCOW"


class StationActionEnum(str, Enum):
    DELETE = "DELETE"
    MOVE = "MOVE"
    REGISTER = "REGISTER"


StationInTuple = tuple[str, str]
ListStationInTuple = list[StationInTuple]


class Station(BaseModel):
    """
    –°—Ç–∞–Ω—Ü–∏—è
    """
    code: str
    title: str
    direction: StationsDirection

    def __eq__(self, other: 'Station') -> bool:
        return self.code == other.code and self.direction == other.direction


class Schedule(BaseModel):
    """
    –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    """
    arrived_station_code: str
    departure_station_code: str
    schedule: list[tuple]
    update_time: datetime.datetime

    #TODO c –ø–æ–º–æ—â—å—é root validator –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã


class DirectionType(BaseModel):
    """
    –í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    """

    direction: str

    def get_text_direction(self) -> str:
        """
        –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–æ–π –¥–ª—è –±–æ—Ç–∞.
        :return: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.
        """
        if self.direction == StationsDirection.FROM_MOSCOW:
            return "–ò–∑ –ú–æ—Å–∫–≤—ã üè°üöÑüè¢"
        elif self.direction == StationsDirection.TO_MOSCOW:
            return "–í –ú–æ—Å–∫–≤—É üè¢üöÑüè°"
        else:
            raise ValueError("–û—à–∏–±–∫–∞ –Ω–∞–ø—Ä–≤–ª–µ–Ω–∏—è")

    def get_direction(self) -> StationsDirection:
        """
        –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–æ–π –¥–ª—è –±–æ—Ç–∞.
        :return: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.
        """
        if self.direction == StationsDirection.FROM_MOSCOW:
            return StationsDirection.FROM_MOSCOW
        elif self.direction == StationsDirection.TO_MOSCOW:
            return StationsDirection.TO_MOSCOW
        else:
            raise ValueError("–û—à–∏–±–∫–∞ –Ω–∞–ø—Ä–≤–ª–µ–Ω–∏—è")

    def get_another(self) -> StationsDirection:
        """
        –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–æ–π –¥–ª—è –±–æ—Ç–∞.
        :return: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.
        """
        if self.direction == StationsDirection.FROM_MOSCOW:
            return StationsDirection.FROM_MOSCOW
        elif self.direction == StationsDirection.TO_MOSCOW:
            return StationsDirection.TO_MOSCOW
        else:
            raise ValueError("–û—à–∏–±–∫–∞ –Ω–∞–ø—Ä–≤–ª–µ–Ω–∏—è")

    @validator("direction")
    def clean_direction(cls, v: str) -> str:
        """
        –í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        :param v: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.
        :return: –í–∞–ª–∏–¥–Ω–æ–µ –Ω–∞–ø—Ä–≤–ª–µ–Ω–∏–µ.
        """
        if v not in StationsDirection.__members__:
            raise ValueError("–û—à–∏–±–∫–∞ –Ω–∞–ø—Ä–≤–ª–µ–Ω–∏—è")
        return v
