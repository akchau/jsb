"""
–ú–æ–¥—É–ª—å –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ Telegram.
"""
import datetime


class DataConstructor:
    """
    –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.
    """

    def __init__(self, pagination):
        self.__pagination = pagination

    @staticmethod
    def _clean_fulling(value: str, target_station_one, target_station_two, speed) -> str:
        """
        –ê–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏.
        :param value:
        :return:
        """
        if target_station_one in value or target_station_two in value or speed:
            return "üçÉ"
        else:
            return "‚ô®Ô∏è"

    @staticmethod
    def _clean_train_type(value: str) -> str:
        """
        –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–º–∞–π–ª–∏–∫–∞ –¥–ª—è —Ç–∏–ø–∞ –ø–æ–µ–∑–¥–∞.
        :param value: –°—Ç—Ä–æ–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–∏–ø–∞ –ø–æ–µ–∑–¥–∞.
        :return:
        """
        clean_value = value
        if value == "–°—Ç–∞–Ω–¥–∞—Ä—Ç –ø–ª—é—Å":
            clean_value = "üöà"
        elif value == "–ü—Ä–∏–≥–æ—Ä–æ–¥–Ω—ã–π –ø–æ–µ–∑–¥":
            clean_value = "üöÇ"
        elif value in ["—ç–∫—Å–ø—Ä–µ—Å—Å –†–≠–ö–°", "—Ñ–∏—Ä–º–µ–Ω–Ω—ã–π —ç–∫—Å–ø—Ä–µ—Å—Å (–±–∏–ª–µ—Ç—ã c —É–∫–∞–∑–∞–Ω–∏–µ–º –º–µ—Å—Ç)"]:
            clean_value = "üöù"
        return clean_value

    def _construct_string(self, string_tuple: tuple, regular_duration: int, target_station_one, target_station_two):
        """
        –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å—Ç—Ä–æ–∫–∏.
        :param data:
        :return:
        """
        title, arrived_time, departure_time, duration, platform, arrival_platform, stops, train_type, _ = string_tuple
        train_type = self._clean_train_type(train_type)

        clean_departure_time = departure_time.strftime("%H:%M")
        clean_arrived_time = arrived_time.strftime("%H:%M")
        time = f"{clean_departure_time}-{clean_arrived_time}"
        bold_flag = duration / regular_duration <= 0.85

        fulling = self._clean_fulling(title, target_station_one=target_station_one, target_station_two=target_station_two,
                                      speed=bold_flag)
        schedule_message = None
        # TODO –æ–Ω–æ –≤–µ—á–µ—Ä–æ–º –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–¥–∞–µ—Ç
        # if datetime.datetime.now().time().hour < int(clean_departure_time.split(":")[0]):
        if bold_flag:
            schedule_message = f"\n<b>{train_type} {time} ({int(duration)}–º–∏–Ω. {fulling}) ~{platform}.</b>"
        else:
            schedule_message = f"\n{train_type} {time} ({int(duration)}–º–∏–Ω. {fulling}) ~{platform}"
        return schedule_message if schedule_message is not None else ""

    def constructor(self, data: list[tuple], target_station_one, target_station_two) -> list:
        """
        –ö–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
        :param data:
        :return:
        """
        schedule_message = "–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n"
        counter = 0
        result_list = []
        regular_duration = round(sum([int(obj[3]) for obj in data])/len(data))
        for value in data:
            if counter < self.__pagination:
                counter += 1
                schedule_message += self._construct_string(value, regular_duration, target_station_one, target_station_two)
            else:
                result_list.append(schedule_message)
                schedule_message = self._construct_string(value, regular_duration, target_station_one, target_station_two)
                counter = 1
        result_list.append(schedule_message)
        return result_list


if __name__ == "__main__":
    constructor = DataConstructor(10)
